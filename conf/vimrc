" set nocompatible
filetype off

" switch buffers without saving
set hidden

set wildchar=<Tab> wildmenu wildmode=full

set number

" turn on mouse in all modes
if has('mouse')
  set mouse=a
endif

" set mapleader from backslash to comma
let mapleader=','
let maplocalleader=','


set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar

" Umlaute
set termencoding=utf8
set enc=utf8
set fileencoding=utf8

highlight Normal guifg=grey guibg=black
colorscheme jellybeans

set expandtab
set cindent

set tabstop=2
set softtabstop=2
set shiftwidth=2

" ignore case in search when no uppercase search
set incsearch
set ignorecase
set smartcase

set autoindent
let g:airline#extensions#tabline#enabled = 1

set backup
set backupdir=./.backup,/tmp
set dir=./.backup,/tmp

set rtp+=~/.vim/bundle/vundle
call vundle#begin()

Plugin 'gmarik/vundle'

" === Plugins! ===

Plugin 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'

" add an artificial anchor to bigger projects to improve search experience
let g:ctrlp_root_markers = ['.ctrlp_anchor']
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif

Plugin 'Raimondi/delimitMate'
Plugin 'bling/vim-airline'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/taglist.vim'
Plugin 'pangloss/vim-javascript'
" install liblibxml2-utils for xmllint
Plugin 'scrooloose/syntastic'
Plugin 'mxw/vim-jsx'
Plugin 'alvan/vim-closetag'

" === Elixir ===

Plugin 'elixir-lang/vim-elixir'
Plugin 'slashmili/alchemist.vim'
Plugin 'chiel92/vim-autoformat'

" === Erlang ===

Plugin 'vim-erlang/vim-erlang-skeletons'
Plugin 'vim-erlang/vim-erlang-compiler'
Plugin 'vim-erlang/vim-erlang-omnicomplete'
Plugin 'vim-erlang/vim-erlang-runtime'
Plugin 'vim-erlang/vim-erlang-tags'

" === Elm ===

Plugin 'elmcast/elm-vim'

let g:elm_syntastic_show_warnings = 1

" === Vue ===

Plugin 'posva/vim-vue'

" === typesccript ===

" syntax highlightning
Plugin 'leafgarland/typescript-vim' 
Plugin 'shougo/vimproc.vim'

" === omnisharp ===

Plugin 'OmniSharp/omnisharp-vim'

" Use the stdio OmniSharp-roslyn server
let g:OmniSharp_server_stdio = 1
let g:OmniSharp_timeout = 5
set previewheight=5

augroup omnisharp_commands
    autocmd!

    " Show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

    " The following commands are contextual, based on the cursor position.
    autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>

    " Finds members in the current buffer
    autocmd FileType cs nnoremap <buffer> <Leader>fm :OmniSharpFindMembers<CR>

    autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>tt :OmniSharpTypeLookup<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>dc :OmniSharpDocumentation<CR>
    autocmd FileType cs nnoremap <buffer> <C-\> :OmniSharpSignatureHelp<CR>
    autocmd FileType cs inoremap <buffer> <C-\> <C-o>:OmniSharpSignatureHelp<CR>

    " Navigate up and down by method/property/field
    autocmd FileType cs nnoremap <buffer> <C-k> :OmniSharpNavigateUp<CR>
    autocmd FileType cs nnoremap <buffer> <C-j> :OmniSharpNavigateDown<CR>

    " Find all code errors/warnings for the current solution and populate the quickfix window
    autocmd FileType cs nnoremap <buffer> <Leader>cc :OmniSharpGlobalCodeCheck<CR>
augroup END

" === Misc ===

Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'mileszs/ack.vim'

" === snippets ===

" Track the engine.
Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:syntastic_check_on_open=1


let g:jsx_ext_required = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_typescript_checkers = ["tscompletejob"]

" syntastic settings

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1

let g:syntastic_xml_checkers=['xmllint']


call vundle#end()


" ack settings
let g:ackprg = 'ag --vimgrep --smart-case'
cnoreabbrev ag Ack
cnoreabbrev aG Ack
cnoreabbrev Ag Ack
cnoreabbrev AG Ack

filetype plugin indent on
syntax on

" == Without this setting cd is impossible
" http://superuser.com/questions/401413/cant-open-folders-in-linux-nerdtree-vim
let NERDTreeDirArrows=0

nmap <Leader>n :NERDTreeToggle<CR>
nmap <Leader>f :NERDTreeFind<CR>
nmap <Leader>b :bNext<CR>

nmap <Leader>a :Autoformat<CR>

nnoremap <Leader>l :exe "vertical resize +5"<CR>
nnoremap <Leader>h :exe "vertical resize -5"<CR>

nnoremap <Leader>j + : exe "resize +5"<CR>
nnoremap <Leader>k - : exe "resize -5"<CR>

" the word under the cursor is searched
nnoremap <Leader>. :Ack<CR>

nnoremap <Leader>vs :vsplit<CR>
nnoremap <Leader>s :split<CR>
